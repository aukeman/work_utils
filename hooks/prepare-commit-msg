#!/bin/bash

PIVOTAL_PROJECT_ID="985502"
PIVOTAL_TOKEN="5d089c9f3dc01c734dece727cc65e513";

pivotal_card_number=$(head -1 $1 | sed -e 's/^[[({]\{0,1\}#\{0,1\}\([0-9]\{8,\}\)\{0,\}.*/\1/')

if [[ -z ${pivotal_card_number} ]] && git symbolic-ref HEAD 2>/dev/null | egrep -q "[0-9]{8,}"; then
                                                                           
	pivotal_card_number=$(git symbolic-ref HEAD 2>/dev/null | sed -e 's/.*\([0-9]\{8,\}\).*/\1/')
	
	if [[ -n {$pivotal_card_number} ]]; then

		http_response=$(curl -s -I -H "X-TrackerToken: $PIVOTAL_TOKEN" "https://www.pivotaltracker.com/services/v5/projects/${PIVOTAL_PROJECT_ID}/stories/${pivotal_card_number}" 2>&1)

		if [[ "$?" != "0" ]]; then
			echo "could not connect to pivotal API" >&2
		elif $(echo "${http_response}" | head -1 | grep -iq "200 OK"); then

			file_contents=$(cat ${1} 2>/dev/null)
			echo "[#${pivotal_card_number}]: ${file_contents}" > $1
		
		elif $(echo "${http_response}" | head -1 | grep -iq "404 Not Found"); then	
			echo "pivotal card #${pivotal_card_number} not found!" >&2
		else
			echo -e "Unexpected response from pivotal:\n${http_response}" >&2
		fi
	fi
fi

#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples.  The first comments out the
# "Conflicts:" part of a merge commit.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.



# case "$2,$3" in
  # merge,)
    # /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;

# ,|template,)
#   /usr/bin/perl -i.bak -pe '
#      print "\n" . `git diff --cached --name-status -r`
#	 if /^#/ && $first++ == 0' "$1" ;;

  # *) ;;
# esac

# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
